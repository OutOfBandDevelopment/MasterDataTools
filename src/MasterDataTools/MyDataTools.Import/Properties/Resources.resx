<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BeforeAfterScripts" xml:space="preserve">
    <value>WITH [Tables] AS(
	SELECT
		'[' + [schemas].[name] + '].[' + [tables].[name] + ']'  AS[TableName]
		, [tables].[object_id] AS[TableId]
		, [schemas].[name] AS[Schema]
		, [tables].[name] AS [Table]
	FROM [sys].[schemas]
	INNER JOIN [sys].[tables]
		ON [tables].[schema_id] = [schemas].[schema_id]
), [ForeignKeys]
AS(
	SELECT
		[Parent].[Schema] AS[ParentSchemaName],
		[Parent].[Table] AS[ParentTableName],
		'[' + [foreign_keys].[name] + ']' AS[ForeignKey],
		[Parent].[TableName] AS[Parent],
		(
			SELECT STRING_AGG(CAST('[' + [columns].[name] + ']' AS NVARCHAR(MAX)), ',') WITHIN GROUP(ORDER BY [foreign_key_columns].[constraint_column_id])
			FROM [sys].[foreign_key_columns]
			INNER JOIN[sys].[columns]
				ON[foreign_key_columns].[parent_object_id] = [columns].[object_id]
					AND[foreign_key_columns].[parent_column_id] = [columns].[column_id]
			WHERE
				[foreign_key_columns].[constraint_object_id] = [foreign_keys].[object_id]
			) AS[ParentColumns],
		[Reference].[TableName] AS[Reference],
		(
			SELECT STRING_AGG(CAST('[' + [columns].[name] + ']' AS NVARCHAR(MAX)), ',') WITHIN GROUP(ORDER BY [foreign_key_columns].[constraint_column_id])
			FROM[sys].[foreign_key_columns]
			INNER JOIN[sys].[columns]
				ON[foreign_key_columns].[referenced_object_id] = [columns].[object_id]
					AND[foreign_key_columns].[referenced_column_id] = [columns].[column_id]
			WHERE
				[foreign_key_columns].[constraint_object_id] = [foreign_keys].[object_id]
		) AS[ReferenceColumns]
	FROM[sys].[foreign_keys]
	INNER JOIN[Tables] AS[Parent]
	   ON[Parent].[TableId] = [foreign_keys].[parent_object_id]
	INNER JOIN[Tables] AS[Reference]
	   ON[Reference].[TableId] = [foreign_keys].[referenced_object_id]
), [ForeignKeysScripts] AS (
	SELECT
		[ParentSchemaName]
		,[ParentTableName]
		,'ALTER TABLE ' + [Parent] + ' DROP CONSTRAINT ' + [ForeignKey] AS [DropFK]
		,'ALTER TABLE ' + [Parent] + ' ADD CONSTRAINT '+[ForeignKey]+' FOREIGN KEY (' +[ParentColumns]+ ') REFERENCES ' + [Reference] + ' (' +[ReferenceColumns]+ ')' AS [CreateFK]
	FROM [ForeignKeys]
), [Columns] AS (
	SELECT 
		 [columns].[object_id]
		 ,[columns].[name] AS [ColumnName]
		 ,[columns].[column_id] AS [ColumnOrder]
		 --,'JSON_VALUE(@json, ''$[0].'+ [columns].[name] +''') AS ['+[columns].[name]+']' AS 
		 ,[types].[name] AS [Type]
		 ,[types].[name] + ISNULL('(' + CASE [types].[name] 
			WHEN 'binary' THEN CAST([columns].[max_length] AS NVARCHAR)
			WHEN 'char' THEN CAST([columns].[max_length] AS NVARCHAR)
			WHEN 'nchar' THEN CAST([columns].[max_length] AS NVARCHAR)
		
			WHEN 'time' THEN CAST([columns].[scale] AS NVARCHAR)
			WHEN 'datetime2' THEN CAST([columns].[scale] AS NVARCHAR)
			WHEN 'datetimeoffset' THEN CAST([columns].[scale] AS NVARCHAR)
		
			WHEN 'decimal' THEN CAST([columns].[precision] AS NVARCHAR) + ', ' + CAST([columns].[scale] AS NVARCHAR)
			WHEN 'numeric' THEN CAST([columns].[precision] AS NVARCHAR) + ', ' + CAST([columns].[scale] AS NVARCHAR)
		
			WHEN 'varbinary' THEN CASE [columns].[max_length]  WHEN -1 THEN 'MAX' ELSE CAST([columns].[max_length] AS NVARCHAR) END
			WHEN 'varchar' THEN CASE [columns].[max_length]  WHEN -1 THEN 'MAX' ELSE CAST([columns].[max_length] AS NVARCHAR) END
			WHEN 'nvarchar' THEN CASE [columns].[max_length]  WHEN -1 THEN 'MAX' ELSE CAST([columns].[max_length] AS NVARCHAR) END
		 END + ')','') AS [TypeDefinition]
		 ,[columns].[is_nullable]
		 ,[columns].[is_rowguidcol]
		 ,[columns].[is_computed]
		 ,[columns].[is_identity]
	FROM [sys].[columns]
	INNER JOIN [sys].[types]
		ON [columns].[user_type_id] = [types].[user_type_id]
			AND [columns].[system_type_id] = [types].[system_type_id]
), [IdentityTables] AS (
	SELECT 
		[Tables].[Schema]
		,[Tables].[Table]
		,'SET IDENTITY_INSERT ' + [Tables].[TableName] + ' ON ' AS [InsertIdentityOn]
		,'SET IDENTITY_INSERT ' + [Tables].[TableName] + ' OFF ' AS [InsertIdentityOff]

	FROM [Columns]
	INNER JOIN [Tables]
		ON [Columns].[object_id] = [Tables].[TableId]
	WHERE
		[Columns].[is_identity] = 1
)
	SELECT 
		CAST(STRING_AGG([Before], CHAR(13) + CHAR(10)) WITHIN GROUP (ORDER BY [Schema],[Table],[Before]) AS XML) AS [Before]
		,CAST(STRING_AGG([After], CHAR(13) + CHAR(10)) WITHIN GROUP (ORDER BY [Schema],[Table],[Before]) AS XML) AS [After]
	FROM (
		SELECT
			[IdentityTables].[Schema]
			,[IdentityTables].[Table]
			,[IdentityTables].[InsertIdentityOn] AS [Before]
			,[IdentityTables].[InsertIdentityOff] AS [After]
		FROM [IdentityTables]
		UNION ALL
		SELECT
			[ForeignKeysScripts].[ParentSchemaName]
			,[ForeignKeysScripts].[ParentTableName]
			,[ForeignKeysScripts].[DropFk] AS [Before]
			,[ForeignKeysScripts].[CreateFK] AS [After]
		FROM [ForeignKeysScripts]
	) AS [Scripts]
	WHERE 	
		[Schema] = @Schema
		AND [Table] = @Table</value>
  </data>
  <data name="BuildMerge" xml:space="preserve">
    <value>WITH [Tables] AS(
	SELECT
		'[' + [schemas].[name] + '].[' + [tables].[name] + ']'  AS[TableName]
		, [tables].[object_id] AS[TableId]
		, [schemas].[name] AS[Schema]
		, [tables].[name] AS [Table]
	FROM [sys].[schemas]
	INNER JOIN [sys].[tables]
		ON [tables].[schema_id] = [schemas].[schema_id]
), [Columns] AS (
	SELECT 
		 [columns].[object_id]
		 ,[columns].[name] AS [ColumnName]
		 ,[columns].[column_id] AS [ColumnOrder]
		 --,'JSON_VALUE(@json, ''$[0].'+ [columns].[name] +''') AS ['+[columns].[name]+']' AS 
		 ,[types].[name] AS [Type]
		 ,[types].[name] + ISNULL('(' + CASE [types].[name] 
			WHEN 'binary' THEN CAST([columns].[max_length] AS NVARCHAR)
			WHEN 'char' THEN CAST([columns].[max_length] AS NVARCHAR)
			WHEN 'nchar' THEN CAST([columns].[max_length] AS NVARCHAR)
		
			WHEN 'time' THEN CAST([columns].[scale] AS NVARCHAR)
			WHEN 'datetime2' THEN CAST([columns].[scale] AS NVARCHAR)
			WHEN 'datetimeoffset' THEN CAST([columns].[scale] AS NVARCHAR)
		
			WHEN 'decimal' THEN CAST([columns].[precision] AS NVARCHAR) + ', ' + CAST([columns].[scale] AS NVARCHAR)
			WHEN 'numeric' THEN CAST([columns].[precision] AS NVARCHAR) + ', ' + CAST([columns].[scale] AS NVARCHAR)
		
			WHEN 'varbinary' THEN CASE [columns].[max_length]  WHEN -1 THEN 'MAX' ELSE CAST([columns].[max_length] AS NVARCHAR) END
			WHEN 'varchar' THEN CASE [columns].[max_length]  WHEN -1 THEN 'MAX' WHEN 4000 THEN 'MAX' ELSE CAST([columns].[max_length] AS NVARCHAR) END
			WHEN 'nvarchar' THEN CASE [columns].[max_length] WHEN -1 THEN 'MAX' WHEN 8000 THEN 'MAX' ELSE CAST([columns].[max_length] AS NVARCHAR) END
		 END + ')','') AS [TypeDefinition]

	FROM [sys].[columns]
	INNER JOIN [sys].[types]
		ON [columns].[user_type_id] = [types].[user_type_id]
			AND [columns].[system_type_id] = [types].[system_type_id]
), [PrimaryKeys] As (
	SELECT 
		[indexes].[object_id]
		,[indexes].[name] AS [IndexName]
		,[columns].[name] AS [ColumnName]
		,[columns].[column_id]
		,[index_columns].[index_column_id] AS [IndexColumnOrder]
	FROM [sys].[indexes]
	INNER JOIN [sys].[index_columns]
		ON [indexes].[object_id] = [index_columns].[object_id]
			AND [indexes].[index_id] = [index_columns].[index_id]
	INNER JOIN [sys].[columns]
		ON [columns].[object_id] = [index_columns].[object_id]
			AND [columns].[column_id] = [index_columns].[column_id]
	WHERE
		[indexes].[is_primary_key] = 1
), [MergeKeyOverride] AS (	
	SELECT 
		[extended_properties].[major_id] AS [object_id]
		,[extended_properties].[name] AS [IndexName]
		,[columns].[name] AS [ColumnName]
		,[columns].[column_id]
		,DENSE_RANK() OVER (
			PARTITION BY [extended_properties].[major_id]
			ORDER BY [extended_properties].[value] 
			) AS [IndexColumnOrder]
	FROM [sys].[extended_properties]
	INNER JOIN [sys].[columns]
		ON [columns].[object_id] = [extended_properties].[major_id]
			AND [columns].[column_id] = [extended_properties].[minor_id]
	WHERE
		[extended_properties].[class] = 1 /*OBJECT_OR_COLUMN*/
		AND [extended_properties].[name] = '__MDT_MergeKey'
), [MergeKeys] AS (
	SELECT *
	FROM [PrimaryKeys]
	WHERE 
		NOT EXISTS(
			SELECT *
			FROM [MergeKeyOverride]
			WHERE 
				[MergeKeyOverride].[object_id] = [PrimaryKeys].[object_id]
		)
	UNION ALL
	SELECT *
	FROM [MergeKeyOverride]
), [MergeFields] AS (
	SELECT 
		[object_id]
		,[IndexName]
		,STRING_AGG(CAST(
			CHAR(9) + 'target.['+[ColumnName]+'] = source.['+[ColumnName]+']'
				AS NVARCHAR(MAX)), ' AND ' + CHAR(13) + CHAR(10)) 
			WITHIN GROUP (ORDER BY [IndexColumnOrder]) AS [MergeOn]
	FROM [MergeKeys]
	GROUP BY 
		[object_id]
		,[IndexName]
), [SourceFields] AS (
	SELECT 
		[Columns].[object_id]
		,STRING_AGG(CAST(
			CHAR(9) + CHAR(9) + '[' + [Columns].[ColumnName] + '] ' + [Columns].[TypeDefinition] + ' ''$.' + [Columns].[ColumnName] + ''''
				AS NVARCHAR(MAX)),',' + CHAR(13) + CHAR(10))
			WITHIN GROUP (ORDER BY [Columns].[ColumnOrder]) AS [SourceFields]
	FROM [Columns]
	GROUP BY 
		[Columns].[object_id]
), [UpdatableColumns] AS (
	SELECT 
		[columns].[object_id]
		,[columns].[name] AS [ColumnName]
		,[columns].[column_id] AS [ColumnOrder]
	FROM [sys].[columns]
	WHERE NOT EXISTS (
		SELECT 
			*
		FROM [MergeKeys]
		WHERE		
			[columns].[object_id] = [MergeKeys].[object_id]
			AND [columns].[column_id] = [MergeKeys].[column_id]
		)
		AND [columns].[is_identity] = 0 /* Can't update identity columns so don't worry about them. */
), [MergeUpdateFields] AS (
	SELECT 
		[NPK].[object_id]
		,STRING_AGG(CAST(
			CHAR(9) + 'target.[' + [NPK].[ColumnName] + '] != source.[' + [NPK].[ColumnName] + ']'
				AS NVARCHAR(MAX)),' OR ' + CHAR(13) + CHAR(10))
			WITHIN GROUP (ORDER BY [NPK].[ColumnOrder]) AS [NotMatchedFields]
		,STRING_AGG(CAST(
			CHAR(9) + CHAR(9) + '[' + [NPK].[ColumnName] + '] = source.[' + [NPK].[ColumnName] + ']'
				AS NVARCHAR(MAX)),',' + CHAR(13) + CHAR(10))
			WITHIN GROUP (ORDER BY [NPK].[ColumnOrder]) AS [UpdateSetFields]
		--,*
	FROM [UpdatableColumns] AS [NPK]
	GROUP BY 
		[NPK].[object_id]
), [InsertFields] AS (
	SELECT 
		[columns].[object_id]
		,STRING_AGG(CAST(
			CHAR(9) + CHAR(9) + '[' + [columns].[name] + ']'
				AS NVARCHAR(MAX)),',' + CHAR(13) + CHAR(10))
			WITHIN GROUP (ORDER BY [columns].[column_id]) AS [AllFields]
		,STRING_AGG(CAST(
			CHAR(9) + CHAR(9) + 'source.[' + [columns].[name] + ']'
				AS NVARCHAR(MAX)),',' + CHAR(13) + CHAR(10))
			WITHIN GROUP (ORDER BY [columns].[column_id]) AS [AllSourceFields]
	FROM [sys].[columns]
	GROUP BY
		[columns].[object_id]
), [MergeModel] AS (
	SELECT
		[Tables].[TableName]
		,[Tables].[TableId]
		,[Tables].[Schema]
		,[Tables].[Table]
		,[SourceFields].[SourceFields]
		,[MergeFields].[MergeOn]
		,[MergeUpdateFields].[NotMatchedFields]
		,[MergeUpdateFields].[UpdateSetFields]
		,[InsertFields].[AllFields]
		,[InsertFields].[AllSourceFields]
	FROM [Tables]
	LEFT OUTER JOIN [SourceFields]
		ON [SourceFields].[object_id] = [Tables].[TableId]
	LEFT OUTER JOIN [MergeFields]
		ON [MergeFields].[object_id] = [Tables].[TableId]
	LEFT OUTER JOIN [MergeUpdateFields]
		ON [MergeUpdateFields].[object_id] = [Tables].[TableId]		
	LEFT OUTER JOIN [InsertFields]
		ON [InsertFields].[object_id] = [Tables].[TableId]		
)
	SELECT CAST(
		'MERGE ' + [MergeModel].[TableName] + ' AS target' + CHAR(13) + CHAR(10) + 
		'USING (' + CHAR(13) + CHAR(10) +
		CHAR(9) + 'SELECT *' + CHAR(13) + CHAR(10) +
		CHAR(9) + 'FROM OPENJSON(@json)' + CHAR(13) + CHAR(10) +
		CHAR(9) + 'WITH (' + CHAR(13) + CHAR(10) +
		[MergeModel].[SourceFields] + CHAR(13) + CHAR(10) +
		CHAR(9) + ')' + CHAR(13) + CHAR(10) +
		') AS source  ON ' + CHAR(13) + CHAR(10) +
		[MergeModel].[MergeOn] + CHAR(13) + CHAR(10) +

		ISNULL(
			'WHEN MATCHED AND (' + CHAR(13) + CHAR(10) + 
			[MergeModel].[NotMatchedFields] + CHAR(13) + CHAR(10) + 
			CHAR(9) + ') THEN UPDATE SET' + CHAR(13) + CHAR(10) +  
			[MergeModel].[UpdateSetFields]
			,'') + CHAR(13) + CHAR(10) +
			
		ISNULL(CASE @AddMissing WHEN 1 THEN
			'WHEN NOT MATCHED BY TARGET' + CHAR(13) + CHAR(10) + 
			CHAR(9) + 'THEN INSERT (' + CHAR(13) + CHAR(10) + 
			[MergeModel].[AllFields] + CHAR(13) + CHAR(10) + 
			CHAR(9) + ') VALUES (' + CHAR(13) + CHAR(10) +  
			[MergeModel].[AllSourceFields] + CHAR(13) + CHAR(10) + 
			CHAR(9) + ')'
		END,'') + CHAR(13) + CHAR(10) +	
		
		ISNULL(CASE @Cleanup WHEN 1 THEN
			'WHEN NOT MATCHED BY SOURCE' + CHAR(13) + CHAR(10) + 
			CHAR(9) + 'THEN DELETE'
		END,'') + CHAR(13) + CHAR(10) +
		
		ISNULL(CASE @Output WHEN 1 THEN
			'OUTPUT ' + CHAR(13) + CHAR(10) + 
			CHAR(9) + '$action,' + CHAR(13) + CHAR(10) + 
			CHAR(9) + 'inserted.*,' + CHAR(13) + CHAR(10) + 
			CHAR(9) + 'deleted.*' + CHAR(13) + CHAR(10)
		END,'') + CHAR(13) + CHAR(10) +

		';'
		AS XML)
		
	FROM [MergeModel]
	WHERE
		[MergeModel].[Schema] = @Schema
		AND [MergeModel].[Table] = @Table</value>
  </data>
</root>